import "reflect-metadata"
import {app, BrowserWindow} from 'electron'
import * as process from 'process'
import {setupInvokeHandlers} from './main'
import installExtension, {REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS} from 'electron-devtools-installer'
import {registerMainHandlers} from './main/handlers/register-main-handlers'
import * as path from 'node:path'
import {WindowSender} from './main/utils/window-sender'
import {container} from 'tsyringe'

registerMainHandlers()
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1080,
    width: 1920,
    titleBarStyle: 'hiddenInset',
    icon: path.join(__dirname, 'assets', 'icon.icns'),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })
  
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
  
  // Open the DevTools.
  mainWindow.webContents.openDevTools()
  
  mainWindow.webContents.on('did-finish-load', () => {
    const windowSender = container.resolve(WindowSender)
    windowSender.hasFinishedLoading((eventName: string, ...args: any) => {
      mainWindow.webContents.send(eventName, ...args)
    })
  })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  await installExtension([REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS])
  createWindow()
  process.on('uncaughtException', (err: Error) => {
    const windowSender = container.resolve(WindowSender)
    // windowSender.asyncSend('error', err) @todo implement error toast
  })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
app.setName('Lazy Rest')


setupInvokeHandlers()
